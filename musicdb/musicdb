#!/usr/bin/env python3

# MusicDB,  a music manager with web-bases UI that focus on music.
# Copyright (C) 2017 - 2021  Ralf Stemmer <ralf.stemmer@gmx.net>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import importlib.util
import os
import sys
import grp
import logging
from musicdb.lib.filesystem     import Filesystem
from musicdb.lib.cfg.musicdb    import MusicDBConfig
from musicdb.lib.db.musicdb     import MusicDatabase
from musicdb.lib.logging        import MusicDBLogger

from musicdb.maintain.configuration   import ConfigurationMaintainer
from musicdb.maintain.musicdatabase   import MusicDatabaseMaintainer
from musicdb.maintain.trackerdatabase import TrackerDatabaseMaintainer


VERSION = None

DEFAULTCONFIGFILE = "/etc/musicdb.ini"


def ReadVersion():
    global VERSION
    versionpath = os.path.join(os.path.dirname(sys.argv[0]), "VERSION")

    try:
        with open(versionpath, "r") as versionfile:
            firstline = versionfile.readline()

        VERSION = firstline.split("-")[0].strip()
    except:
        VERSION = "x.x.x"



def LoadAllModules():
    moddir = os.path.join(os.path.dirname(sys.argv[0]), "mod")

    # Get a list of all modules (a tuple (name, path))
    fs = Filesystem(moddir)
    modulepaths = fs.GetFiles()
    modulefiles = [(fs.GetFileName(path), path) for path in modulepaths if fs.GetFileExtension(path) == "py"]

    # Load all modules
    modules = {}
    for modulename, modulepath in modulefiles:
        try:
            spec = importlib.util.spec_from_file_location(modulename, modulepath)
        except Exception as e:
            print("\033[1;33mWARNING: Loading spec for module \033[0;33m%s\033[1;33m failed with following error: \033[0;33m%s\033[1;30m (Module will not be loaded)\033[0m"%(modulename, str(e)))
            continue

        try:
            module = importlib.util.module_from_spec(spec)
        except Exception as e:
            print("\033[1;33mWARNING: Importing module \033[0;33m%s\033[1;33m failed with following error: \033[0;33m%s\033[1;30m (Module will not be loaded)\033[0m"%(modulename, str(e)))
            continue

        try:
            spec.loader.exec_module(module)
        except Exception as e:
            print("\033[1;33mWARNING: Initial execution of module \033[0;33m%s\033[1;33m failed with following error: \033[0;33m%s\033[1;30m (Module will not be loaded)\033[0m"%(modulename, str(e)))
            continue

        modules[modulename] = module

    # Return a list of loaded python modules
    return modules



def CheckDatabases(musicdbpath, trackerdbpath, lycradbpath):
    # 2nd argument is the expected version number
    musicdbmaintainer   = MusicDatabaseMaintainer(  musicdbpath,   5)
    trackerdbmaintainer = TrackerDatabaseMaintainer(trackerdbpath, 3)

    logging.info("Checking \033[0;36m%s", musicdbpath)
    if not musicdbmaintainer.CheckVersion():
        logging.warning("%s is too old!\033[1;34m Upgrading …", musicdbpath)
        musicdbmaintainer.Upgrade()

    logging.info("Checking \033[0;36m%s", trackerdbpath)
    if not trackerdbmaintainer.CheckVersion():
        logging.warning("%s is too old!\033[1;34m Upgrading …", trackerdbpath)
        trackerdbmaintainer.Upgrade()
    return None


def CheckConfiguration(configpath):
    # 2nd argument is the expected version number
    configuration = ConfigurationMaintainer(configpath, 5)

    logging.info("Checking \033[0;36m%s", configpath)
    if not configuration.CheckVersion():
        logging.warning("%s is too old!\033[1;34m Upgrading …", configpath)
        configuration.Upgrade()
    return None



if __name__ == "__main__":
    ReadVersion()
    print("\033[1;31mMusicDB [\033[1;34m" + VERSION + "\033[1;31m]\033[0m")

    # Generate argument parser
    argparser = argparse.ArgumentParser(description="Universal MusicDB command line tool")
    argparser.add_argument("-v", "--version", action="store_true", help="show version and exit")
    argparser.add_argument("-q", "--quiet",   action="store_true", help="be quiet - do not write into debug file")
    argparser.add_argument(      "--verbose", action="store_true", help="be verbose - write into log file (usually stdout)")
    argparser.add_argument("--config"       # allows using nondefault config file
        , action="store"
        , type=str
        , metavar="path"
        , default=DEFAULTCONFIGFILE
        , help="Path to a nondefault config file. This will also influence the database file.")
    argparser.add_argument("--logfile"
        , action="store"
        , type=str
        , metavar="dest"
        , help="Override log-setting. dest can be a path to a file or \"stdout\" or \"stderr\".")
    argparser.add_argument("--loglevel"
        , action="store"
        , choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        , type=str
        , metavar="level"
        , help="Override log-setting for the loglevel that shall be logged.")

    parserset = argparser.add_subparsers(title="Modules", metavar="module", help="module help")

    log = MusicDBLogger()   # The MusicDBConfig moduel needs a set up logger. The setting for logging will be applied later on.


    # Get all modules and extend the argument parser
    print("\033[1;34mLoading modules …\033[0m")
    modules = LoadAllModules()

    print("\033[1;34mInitializing …\033[0m")
    for modulename in modules:
        modclass = getattr(modules[modulename], modulename)
        modclass.MDBM_CreateArgumentParser(parserset, modulename)

    args = argparser.parse_args()

    if args.version:
        # was already printed
        exit(0)

    fs = Filesystem("/")


    # open the config file
    args.config = os.path.abspath(args.config)
    if not fs.IsFile(args.config):
        print("\033[1;31mFATAL ERROR: Config-file does not exist!\033[0m (" + args.config + ")")
        exit(1)

    CheckConfiguration(args.config)

    try:
        config = MusicDBConfig(args.config)
    except Exception as e:
        print("\033[1;31mFATAL ERROR: Opening config-file failed!\033[0m (" + args.config + ")")
        print(e)
        exit(1)


    # Check for effective group and print a warning when it is not MusicDB
    gid   = os.getegid()
    group = grp.getgrgid(gid)
    gname = group[0]
    if gname != config.music.group:
        print("\033[1;33mMusicDB runs in UNIX group \033[1;31m%s\033[1;33m but expects group \033[1;37m%s\033[1;33m."%(gname, config.music.group))
        print("\033[1;30m\tTo change the group, run \033[0;37mnewgrp %s\033[1;30m before executing MusicDB\033[0m"%(config.music.group))


    # reconfigure logger
    if args.quiet:
        debugfile = None
    else:
        debugfile = config.log.debugfile

    if args.logfile:
        args.logfile= os.path.abspath(args.logfile)
        logfile = args.logfile
    elif args.verbose:
        logfile = config.log.logfile
    else:
        logfile = None
        
    if args.loglevel:
        loglevel = args.loglevel
    else:
        loglevel = config.log.loglevel
    log.Reconfigure(logfile, loglevel, debugfile, config)


    # Get module name that shall be executed
    try:
        modulename = args.module
    except:
        argparser.print_help()
        exit(1)


    # get, check and open the database from path
    databasepath = config.database.path

    if not fs.IsFile(databasepath):
        print("\033[1;31mFATAL ERROR: Invalid database path!\n  " 
                + databasepath + " is not a file or does not exist!\033[0m")
        exit(1)
    if fs.GetFileExtension(databasepath) != "db":
        print("\033[1;31mFATAL ERROR: Invalid database path!\n  " 
                + databasepath + " has an unexpected extension!\033[0m (.db expected)")
        exit(1)

    CheckDatabases(databasepath, config.tracker.dbpath, config.lycra.dbpath)

    try:
        database = MusicDatabase(databasepath)
    except Exception as e:
        print("\033[1;31mFATAL ERROR: Opening database failed!\033[0m (" + databasepath + ")")
        print(e)
        exit(1)


    # execute module
    modclass = getattr(modules[modulename], modulename)
    modobj   = modclass(config, database)
    exitcode = modobj.MDBM_Main(args)
    exit(exitcode)


# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

