// MusicDB,  a music manager with web-bases UI that focus on music.
// Copyright (C) 2017-2020  Ralf Stemmer <ralf.stemmer@gmx.net>
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

"use strict";
/*
 *
 * This manager handled uploading data.
 *
 * When an upload gets started, an data ID is generated by this script.
 * Together with other meta data, an Upload-Request gets send to the MusicDB Server.
 * The server then requests chunks of the data.
 *
 * After a chunk of data is sent, a notification within a certain time gets expected by this upload manager.
 * This notification contains a state and request of the next chunk.
 *
 */

class UploadManager
{
    constructor()
    {
        this.uploads = new Object;
    }



    UploadFile(filedescription)
    {
        let reader = new FileReader();

        reader.onload = (event)=>
            {
                let contents = event.target.result;
                this.StartUpload(filedescription, new Uint8Array(contents));
            };
        reader.readAsArrayBuffer(filedescription);
    }



    async StartUpload(filedescription, rawdata)
    {
        
        let task = new Object();
        task.id       = Math.random().toString(16);
        task.data     = rawdata;
        task.size     = rawdata.length;
        task.offset   = 0;
        task.type     = filedescription.type;
        task.checksum = new Uint8Array(await crypto.subtle.digest("SHA-512", rawdata));
        this.uploads.push(task);
        
        MusicDB_Call("InitiateUpload", 
            {
                uploadid: task.id,
                type:     task.type,
                size:     task.size,
                checksum: task.checksum
            });
        window.console && console.log(uploadtask);
    }



    onMusicDBNotification(fnc, sig, rawdata)
    {
        if(fnc == "MusicDB:Upload" && sig == "onChunkRequest")
        {
            window.console && console.log(rawdata);
        }
        else if(fnc == "MusicDB:Upload" && sig == "onUploadComplete")
        {
            window.console && console.log(rawdata);
        }
    }



    onMusicDBMessage(fnc, sig, args, pass)
    {
        //if(fnc == "GetMDBState" && sig == "UpdateMDBState")
        //{
        //}

        return;
    }
}



// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

